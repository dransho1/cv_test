import cv2
import numpy as np
import glob, os
import sys

def make_input(data):
    assert data.shape[1] == 3
    # make data into 0's/1's
    data = data.astype(np.float32) / 255.0

    # columns 0 1 2 0*0 0*1 0*2 1*1 1*2 2*2
    d0 = data[:,0].reshape(-1,1)
    d1 = data[:,1].reshape(-1,1)
    d2 = data[:,2].reshape(-1,1)

    #return data
    result = np.hstack((data, d0*d0, d0*d1, d0*d2, d1*d1, d1*d2, d2*d2))

    #print 'data shape is: ', data.shape
    #print 'result shape is: ', result.shape

    #print data[:5]
    #print result[:5]

    return result

def predict(clf, rgb):

    assert rgb.shape[-1] == 3
    
    orig_shape = rgb.shape[:-1]
    input_data = make_input(rgb.reshape(-1, 3))

    result = ( np.dot(input_data, clf['coef']) + clf['intercept'] > 0.0 ).astype(np.uint8)
    
    result = result.reshape(orig_shape)

    return result

clf = np.load('the_classifier.npz')



for filename in glob.glob('odroid/*.[jJ][pP][eE][gG]'):
    test_rgb = cv2.imread(filename)

    result = predict(clf, test_rgb)
    
    img = result * 255
    img_color = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
    cv2.imshow('win', np.hstack((test_rgb, img_color)))
    
    while np.uint8(cv2.waitKey(5)).view(np.int8) < 0: pass
